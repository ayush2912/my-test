name: Build and push Docker image to ECR
on:
  push:
    branches:
      - staging
      - demo
      - development
      - main
      - mirror

jobs:
  build-and-push-stage:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    env:
      
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_ENV: ${{secrets.ENV}}
      TF_VAR_TG: ${{secrets.TG}}
      TF_VAR_key: ${{secrets.key}}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 168933414344.dkr.ecr.ap-south-1.amazonaws.com
          IMAGE_NAME: offsetmax-stage-project-service
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
         terraform_version: latest
      - name: Terraform Init
        run: terraform init -backend-config="key=project-service-stage/terraform.tfstate"
      - name: Terraform Plan
        run: terraform plan
      - name: terraform apply
        run: terraform apply -auto-approve
     

  build-and-push-demo:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/demo'
    environment: demo
    env:
      
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_ENV: ${{secrets.ENV}}
      TF_VAR_TG: ${{secrets.TG}}
      TF_VAR_key: ${{secrets.key}}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 168933414344.dkr.ecr.ap-south-1.amazonaws.com
          IMAGE_NAME: offsetmax-demo-project-service
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: terraform apply
        run: terraform apply -auto-approve

  build-and-push-development:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    environment: development
    env:
      
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_ENV: ${{secrets.ENV}}
      TF_VAR_TG: ${{secrets.TG}}
      TF_VAR_key: ${{secrets.key}}

      
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 168933414344.dkr.ecr.ap-south-1.amazonaws.com
          IMAGE_NAME: offsetmax-dev-project-service
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
      - name: Terraform Init
        run: terraform init -backend-config="key=project-service-dev/terraform.tfstate"
      - name: Terraform Plan
        run: terraform plan
      - name: terraform apply
        run: terraform apply -auto-approve   

  build-and-push-mirror:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/mirror'
    environment: mirror
    env:
      
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_ENV: ${{secrets.ENV}}
      TF_VAR_TG: ${{secrets.TG}}
      TF_VAR_key: ${{secrets.key}}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 168933414344.dkr.ecr.ap-south-1.amazonaws.com
          IMAGE_NAME: offsetmax-mirror-project-service
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="key=project-service-mirror/terraform.tfstate"
      - name: Terraform Plan
        run: terraform plan
      - name: terraform apply
        run: terraform apply -auto-approve 


  build-and-push-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment: main
    env:
      
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_ENV: ${{secrets.ENV}}
      TF_VAR_TG: ${{secrets.TG}}
      TF_VAR_key: ${{secrets.key}}
      
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 168933414344.dkr.ecr.ap-south-1.amazonaws.com
          IMAGE_NAME: offsetmax-prod-project-service
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: terraform apply
        run: terraform apply -auto-approve             
