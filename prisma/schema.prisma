generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  ownerId        String?
  projects       Project[]
  accessPolicies AccessPolicy[]
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  email           String         @unique
  name            String?
  organizations   Organization[]
  projects        Project[]
  documents       Document[]
  accessPolicies  AccessPolicy[]
  projectsUpdated Project[]      @relation("ProjectUpdatedByUser")
  chat            Chat[]
  country         String?        @default("IN")
}

model AccessPolicy {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id])
  canRead        Boolean       @default(true)
  canCreate      Boolean?
  canUpdate      Boolean?
  canDelete      Boolean?
}

model Project {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  updatedByUserId    String?
  updatedByUser      User?          @relation(name: "ProjectUpdatedByUser", fields: [updatedByUserId], references: [id])
  name               String
  description        String?
  owner              User?          @relation(fields: [ownerId], references: [id])
  ownerId            String?
  organization       Organization?  @relation(fields: [organizationId], references: [id])
  organizationId     String?
  sector             String?
  stage              String?
  registryId         String?
  registry           Registry?      @relation(fields: [registryId], references: [id])
  documents          Document[]
  accessPolicies     AccessPolicy[]
  chats              Chat[]
  isPrivate          Boolean?
  country            String?        @default("IN")
  registryProjectUrl String?
  registryProjectId  String?
}

model Registry {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  projects Project[]
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  message   String?
  creatorId String?
  creator   User?      @relation(fields: [creatorId], references: [id])
  documents Document[]
  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  filename   String?
  filetype   String?
  storageKey String?
  url        String?
  ownerId    String?
  owner      User?    @relation(fields: [ownerId], references: [id])
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id])
  chatId     String?
  chat       Chat?    @relation(fields: [chatId], references: [id])
}

type NotificationMetadata {
  projectId  String?
  chatId     String?
  documentId String?
}

model NotificationReceivers {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  receiverId     String?
  isRead         Boolean?
  notificationId String?
  notification   Notification? @relation(fields: [notificationId], references: [id])
}

model Notification {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  creatorId             String?
  type                  String?
  metadata              NotificationMetadata?
  notificationReceivers NotificationReceivers[]
}
