generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  ownerId        String?        @db.ObjectId
  projects       Project[]
  accessPolicies AccessPolicy[]
}

model User {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now()) @updatedAt
  email               String                  @unique
  name                String?
  firstName           String?
  lastName            String?
  organizations       Organization[]
  projects            Project[]
  documents           Document[]
  accessPolicies      AccessPolicy[]
  projectsUpdated     Project[]               @relation("ProjectUpdatedByUser")
  chat                Chat[]
  notifications       NotificationReceivers[]
  country             String?                 @default("IN")
  lastOpenedDocuments Document[]              @relation("DocumentLastOpenedBy")
  accessToken         String?                 @unique
}



model AccessPolicy {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?       @db.ObjectId
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?       @db.ObjectId
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projectId      String?       @db.ObjectId
  project        Project?      @relation(fields: [projectId], references: [id])
  documentId     String?       @db.ObjectId
  document       Document?     @relation(fields: [documentId], references: [id])
  canRead        Boolean       @default(true)
  canCreate      Boolean?
  canUpdate      Boolean?
  canDelete      Boolean?
  isHandler      Boolean?     /// Handlers have access to the Carbon Desk view
  relationType   String?      /// USER_ORGANIZATION, USER_PROJECT, USER_DOCUMENT
  entity         String?      /// The entity level that this user has access to, PROJECT/ORGANIZATION/DOCUMENT
  role           String?      /// Role of the user in relatio to the entity, USER/ADMIN/SUPER ADMIN
}

model Project {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  updatedByUserId     String?              @db.ObjectId
  updatedByUser       User?                @relation(name: "ProjectUpdatedByUser", fields: [updatedByUserId], references: [id])
  name                String?
  description         String?
  owner               User?                @relation(fields: [ownerId], references: [id])
  ownerId             String?              @db.ObjectId
  organization        Organization?        @relation(fields: [organizationId], references: [id])
  organizationId      String?              @db.ObjectId
  sectoralScope       String?
  stage               String?
  registryId          String?              @db.ObjectId
  registry            Registry?            @relation(fields: [registryId], references: [id])
  documents           Document[]
  accessPolicies      AccessPolicy[]
  chats               Chat[]
  notifications       Notification[]
  registryProjectData RegistryProjectData? @relation("RegistryProjectData")
  isPrivate           Boolean?
  isArchived          Boolean?
  country             String?              @default("IN")
  registryProjectUrl  String?              /// Registry Project URL
  registryProjectId   String?              /// Registry Project ID, e.g. 1805
  projectRiskScore    ProjectRiskScore?    @relation("ProjectRiskScore")
}

model RegistryProjectData {
  id                                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt
  projectId                         String?   @unique @db.ObjectId
  project                           Project?  @relation(name: "RegistryProjectData", fields: [projectId], references: [id])
  metadata                          String?
  creditingPeriodStartDate          DateTime?
  creditingPeriodEndDate            DateTime?
  counterparty                      String?
  countryOfActivity                 String?
  estimatedAnnualEmissionReductions String?
  methodology                       String?
  projectStatus                     String?
  sectoralScope                     String?
  registryProjectId                 String?
  registryId                        String?   @db.ObjectId
  registry                          Registry? @relation(fields: [registryId], references: [id])
  point1Lat                         String?
  point2Lat                         String?
  point3Lat                         String?
  point4Lat                         String?
  point1Long                        String?
  point2Long                        String?
  point3Long                        String?
  point4Long                        String?
  direction1Lat                     String?
  direction2Lat                     String?
  direction3Lat                     String?
  direction4Lat                     String?
  direction1Long                    String?
  direction2Long                    String?
  direction3Long                    String?
  direction4Long                    String?
}

model ProjectRiskScore {
  id                               String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId                        String   @unique @db.ObjectId
  project                          Project  @relation(name: "ProjectRiskScore", fields: [projectId], references: [id])
  startDateRiskScore               Float?
  geographyRiskScore               Float?
}

model Registry {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String /// GCC, Verra
  projects             Project[]
  registryProjectDatas RegistryProjectData[]
}

model Chat {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  message       String?
  creatorId     String?        @db.ObjectId
  creator       User?          @relation(fields: [creatorId], references: [id])
  documents     Document[]
  notifications Notification[]
  projectId     String?        @db.ObjectId
  project       Project?       @relation(fields: [projectId], references: [id])
}

model Document {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastOpenedAt   DateTime?
  lastOpenedById String?        @db.ObjectId
  lastOpenedBy   User?          @relation(name: "DocumentLastOpenedBy", fields: [lastOpenedById], references: [id])
  name           String
  filename       String?
  filetype       String?
  storageKey     String?
  url            String?
  status         String?        /// Status of the document, such as APPROVED or PENDNG or REJECTED
  ownerId        String?        @db.ObjectId
  owner          User?          @relation(fields: [ownerId], references: [id])
  projectId      String?        @db.ObjectId
  project        Project?       @relation(fields: [projectId], references: [id])
  chatId         String?        @db.ObjectId
  chat           Chat?          @relation(fields: [chatId], references: [id])
  notifications  Notification[]
  accessPolicy   AccessPolicy[]
}

model NotificationReceivers {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  receiverId     String?       @db.ObjectId
  receiver       User?         @relation(fields: [receiverId], references: [id])
  isRead         Boolean?
  notificationId String?       @db.ObjectId
  notification   Notification? @relation(fields: [notificationId], references: [id])
}

model Notification {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  creatorId             String?                 @db.ObjectId
  type                  String?
  projectId             String?                 @db.ObjectId
  project               Project?                @relation(fields: [projectId], references: [id])
  chatId                String?                 @db.ObjectId
  chat                  Chat?                   @relation(fields: [chatId], references: [id])
  documentId            String?                 @db.ObjectId
  document              Document?               @relation(fields: [documentId], references: [id])
  notificationReceivers NotificationReceivers[]
}
