generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  ownerId        String?
  projects       Project[]
  accessPolicies AccessPolicy[]
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  email          String         @unique
  name           String?
  organizations  Organization[]
  projects       Project[]
  documents      Document[]
  accessPolicies AccessPolicy[]
  countryId      String        @default("IN") // Refers to ISO-
}

model AccessPolicy {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id])
  canRead        Boolean       @default(true) 
  canCreate      Boolean?
  canUpdate      Boolean?
  canDelete      Boolean?
}

model Project {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String
  description    String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  ownerId        String?
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?
  sector         String?        // MANUFACTURING, CONSTRUCTION, TRANSPORT, ENERGY_DEMAND, ENERGY_TRANSPORT
  stage          String?        // DEVELOPMENT, REGISTERED, PRE_PIN, PIN, APPROVAL_REQUESTED
  registry       String?        // VERRA, GCC, GS, CDM
  documents      Document[]
  accessPolicies  AccessPolicy[]
  projectMessages ProjectMessage[]
  isPrivate      Boolean? 
  country          String?        @default("IN") 
}

model ProjectMessage { 
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  message       String?
  creatorId     String?
  documents     Document[]
  projectId     String? 
  project       Project?      @relation(fields: [projectId], references: [id])
}

model Document {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  filename  String?
  filetype  String?
  url       String?
  ownerId   String?   
  owner     User?    @relation(fields: [ownerId], references: [id])
  projectId String? 
  project   Project?  @relation(fields: [projectId], references: [id])
  projectMessageId  String?
  projectMessage  ProjectMessage? @relation(fields: [projectMessageId], references: [id])
}
