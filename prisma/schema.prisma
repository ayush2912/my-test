generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type DateRange {
  startDate DateTime
  endDate   DateTime
}

model Organization {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  name               String?
  url                String?
  logo               String? /// Base64 Representation of the logo image 
  logoUrl            String?
  type               String? ///  
  estimatedPortfolio Int?
  expiryDate         DateTime?
  status             String?        @default("ACTIVE")
  members            User[]
  projects           Project[]
  accessPolicies     AccessPolicy[]
  Issuance           Issuance[]
}

model User {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now()) @updatedAt
  email               String                  @unique
  name                String?
  firstName           String?
  lastName            String?
  avatar              String? /// Base64 representation of the avatar image buffer
  avatarUrl           String?
  status              String?                 @default("ACTIVE")
  timezone            String?
  organizationId      String?
  organization        Organization?           @relation(fields: [organizationId], references: [id])
  projects            Project[]
  documents           Document[]
  accessPolicies      AccessPolicy[]
  projectsUpdated     Project[]               @relation("ProjectUpdatedByUser")
  chat                Chat[]
  notifications       NotificationReceivers[]
  country             String?                 @default("IN")
  lastOpenedDocuments Document[]              @relation("DocumentLastOpenedBy")
  updatedDocuments    Document[]              @relation("DocumentUpdatedBy")
  accessToken         String?                 @unique
}

model AccessPolicy {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?       @db.ObjectId
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?       @db.ObjectId
  organization   Organization? @relation(fields: [organizationId], references: [id])
  role           String? /// Role of the user in relatio to the entity, USER/ADMIN/SUPER ADMIN
  isPrimary      Boolean?

  permissions   String[] /// List of permissions to be granted to the user in this access policy.
  notifications Notification[]

  notificationsDisabledProjectIds String[] @db.ObjectId
}

model ProjectStage {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      String
  startDate DateTime?
  endDate   DateTime?
  dueDate   DateTime?
  projectId String    @db.ObjectId
  project   Project?  @relation(fields: [projectId], references: [id])
}

model Project {
  id                                String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                         DateTime                 @default(now())
  updatedAt                         DateTime                 @updatedAt
  updatedByUserId                   String?                  @db.ObjectId
  updatedByUser                     User?                    @relation(name: "ProjectUpdatedByUser", fields: [updatedByUserId], references: [id])
  name                              String?
  description                       String?
  owner                             User?                    @relation(fields: [ownerId], references: [id])
  ownerId                           String?                  @db.ObjectId
  organization                      Organization?            @relation(fields: [organizationId], references: [id])
  organizationId                    String?                  @db.ObjectId
  sectoralScope                     String?
  estimatedAnnualEmissionReductions Int?
  projectStatus                     String?
  stage                             String? /// Current stage of the project, such as Stage
  stages                            ProjectStage[]
  registryId                        String?                  @db.ObjectId
  registry                          Registry?                @relation(fields: [registryId], references: [id])
  documents                         Document[]
  chats                             Chat[]
  notifications                     Notification[]
  issuanceLots                      Issuance[]
  registryProjectData               RegistryProjectData?     @relation("RegistryProjectData")
  isPrivate                         Boolean?
  isArchived                        Boolean?
  country                           String?                  @default("IN")
  registryProjectUrl                String? /// Registry Project URL
  registryProjectId                 String? /// Registry Project ID, e.g. 1805
  projectRiskScore                  ProjectRiskScore?        @relation("ProjectRiskScore")
  bids                              Bid[]
  creditsAskPrice                   ProjectCreditsAskPrice[]
  corsiaEligibility                 Boolean?
  otherEligibility                  string?
}

model RegistryProjectData {
  id                                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt
  projectId                         String?   @unique @db.ObjectId
  project                           Project?  @relation(name: "RegistryProjectData", fields: [projectId], references: [id])
  projectName                       String?
  metadata                          String?
  creditingPeriodStartDate          DateTime?
  creditingPeriodEndDate            DateTime?
  counterparty                      String?
  countryOfActivity                 String?
  estimatedAnnualEmissionReductions String?
  methodology                       String?
  projectStatus                     String?
  sectoralScope                     String?
  registryProjectId                 String?
  registryId                        String?   @db.ObjectId
  registry                          Registry? @relation(fields: [registryId], references: [id])
  point1Lat                         String?
  point2Lat                         String?
  point3Lat                         String?
  point4Lat                         String?
  point1Long                        String?
  point2Long                        String?
  point3Long                        String?
  point4Long                        String?
  direction1Lat                     String?
  direction2Lat                     String?
  direction3Lat                     String?
  direction4Lat                     String?
  direction1Long                    String?
  direction2Long                    String?
  direction3Long                    String?
  direction4Long                    String?
}

model ProjectRiskScore {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  projectId          String  @unique @db.ObjectId
  project            Project @relation(name: "ProjectRiskScore", fields: [projectId], references: [id])
  startDateRiskScore Float?
  geographyRiskScore Float?
}

model Registry {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String /// GCC, Verra
  projects             Project[]
  registryProjectDatas RegistryProjectData[]
  issuance             Issuance[]
}

model Chat {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  message       String?
  creatorId     String?        @db.ObjectId
  creator       User?          @relation(fields: [creatorId], references: [id])
  documents     Document[]
  notifications Notification[]
  projectId     String?        @db.ObjectId
  project       Project?       @relation(fields: [projectId], references: [id])
  bidId         String?        @db.ObjectId
  bid           Bid?           @relation(fields: [bidId], references: [id])
}

model Document {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  updatedById    String?        @db.ObjectId
  updatedBy      User?          @relation(name: "DocumentUpdatedBy", fields: [updatedById], references: [id])
  lastOpenedAt   DateTime?
  lastOpenedById String?        @db.ObjectId
  lastOpenedBy   User?          @relation(name: "DocumentLastOpenedBy", fields: [lastOpenedById], references: [id])
  name           String
  filename       String?
  filetype       String?
  storageKey     String?
  url            String?
  status         String? /// DEPRECIATED: Status of the document
  stage          String? /// Stage of the document, such as REQUESTED_BY_HANDLER, PENDING_VERIFICATION_BY_CLIENT
  ownerType      String? /// Type of Owner, such as Project Handler (PH) or Project Client (PC)
  ownerId        String?        @db.ObjectId
  owner          User?          @relation(fields: [ownerId], references: [id])
  projectId      String?        @db.ObjectId
  project        Project?       @relation(fields: [projectId], references: [id])
  chatId         String?        @db.ObjectId
  chat           Chat?          @relation(fields: [chatId], references: [id])
  bidId          String?        @db.ObjectId
  bid            Bid?           @relation(fields: [bidId], references: [id])
  notifications  Notification[]
}

model NotificationReceivers {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  receiverId     String?       @db.ObjectId
  receiver       User?         @relation(fields: [receiverId], references: [id])
  isRead         Boolean?
  notificationId String?       @db.ObjectId
  notification   Notification? @relation(fields: [notificationId], references: [id])
}

model Notification {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  creatorId             String?                 @db.ObjectId
  type                  String?
  projectId             String?                 @db.ObjectId
  project               Project?                @relation(fields: [projectId], references: [id])
  chatId                String?                 @db.ObjectId
  chat                  Chat?                   @relation(fields: [chatId], references: [id])
  documentId            String?                 @db.ObjectId
  document              Document?               @relation(fields: [documentId], references: [id])
  accessPolicyId        String?                 @db.ObjectId
  accessPolicy          AccessPolicy?           @relation(fields: [accessPolicyId], references: [id])
  notificationReceivers NotificationReceivers[]
  metadata              Json?
}

model Issuance {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  vintagePeriod    DateRange?
  monitoringPeriod DateRange?
  quantityIssued   Int?
  issuanceStatus   String?
  issuanceDate     DateTime?
  projectId        String?       @db.ObjectId
  project          Project?      @relation(fields: [projectId], references: [id])
  registryId       String?       @db.ObjectId
  registry         Registry?     @relation(fields: [registryId], references: [id])
  organization     Organization? @relation(fields: [organizationId], references: [id])
  organizationId   String?       @db.ObjectId
}

model ProjectCreditsAskPrice {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  projectId      String   @db.ObjectId
  project        Project  @relation(fields: [projectId], references: [id])
  period         DateTime
  creditsIssued  Int?
  updatedCredits Int?
  askPrice       Float?
}

model Bid {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  projectId     String            @db.ObjectId
  project       Project           @relation(fields: [projectId], references: [id])
  status        String?
  period        DateTime
  expiryDate    DateTime?
  volume        Int
  price         Float
  deliveryDate  DateTime?
  chats         Chat[]
  documents     Document[]
  history       BidPriceHistory[]
}

model BidPriceHistory {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bidId             String          @db.ObjectId
  bid               Bid             @relation(fields: [bidId], references: [id])
  period            DateTime
  volume            Int
  price             Float
}