generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  ownerId        String?
  projects       Project[]
  accessPolicies AccessPolicy[]
}

model User {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now()) @updatedAt
  email               String                  @unique
  name                String?
  organizations       Organization[]
  projects            Project[]
  documents           Document[]
  accessPolicies      AccessPolicy[]
  projectsUpdated     Project[]               @relation("ProjectUpdatedByUser")
  chat                Chat[]
  notifications       NotificationReceivers[]
  country             String?                 @default("IN")
  lastOpenedDocuments Document[]              @relation("DocumentLastOpenedBy")
}

model AccessPolicy {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id])
  canRead        Boolean       @default(true)
  canCreate      Boolean?
  canUpdate      Boolean?
  canDelete      Boolean?
  isHandler      Boolean? /// Handlers have access to the Carbon Desk view
  entity         String? /// The entity level that this user has access to
}

model Project {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  updatedByUserId     String?
  updatedByUser       User?                 @relation(name: "ProjectUpdatedByUser", fields: [updatedByUserId], references: [id])
  name                String
  description         String?
  owner               User?                 @relation(fields: [ownerId], references: [id])
  ownerId             String?
  organization        Organization?         @relation(fields: [organizationId], references: [id])
  organizationId      String?
  sector              String?
  stage               String?
  registryId          String?
  registry            Registry?             @relation(fields: [registryId], references: [id])
  documents           Document[]
  accessPolicies      AccessPolicy[]
  chats               Chat[]
  notifications       Notification[]
  registryProjectData RegistryProjectData[] @relation("RegistryProjectData")
  isPrivate           Boolean?
  country             String?               @default("IN")
  registryProjectUrl  String? /// Registry Project URL
  registryProjectId   String? /// Registry Project ID, e.g. 1805
}

model RegistryProjectData {
  id                                String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId                         String?
  project                           Project?  @relation(name: "RegistryProjectData", fields: [projectId], references: [id])
  metadata                          String?
  creditingPeriodStartDate          DateTime?
  creditingPeriodEndDate            DateTime?
  counterparty                      String?
  countryOfActivity                 String?
  estimatedAnnualEmissionReductions String?
  methodology                       String?
  projectStatus                     String?
  sectorialScope                    String?
  registryProjectId                 String?
}

model Registry {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String /// GCC, Verra
  projects Project[]
}

model Chat {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  message       String?
  creatorId     String?
  creator       User?          @relation(fields: [creatorId], references: [id])
  documents     Document[]
  notifications Notification[]
  projectId     String?
  project       Project?       @relation(fields: [projectId], references: [id])
}

model Document {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastOpenedAt   DateTime?
  lastOpenedById String?
  lastOpenedBy   User?          @relation(name: "DocumentLastOpenedBy", fields: [lastOpenedById], references: [id])
  name           String
  filename       String?
  filetype       String?
  storageKey     String?
  url            String?
  ownerId        String?
  owner          User?          @relation(fields: [ownerId], references: [id])
  projectId      String?
  project        Project?       @relation(fields: [projectId], references: [id])
  chatId         String?
  chat           Chat?          @relation(fields: [chatId], references: [id])
  notifications  Notification[]
}

model NotificationReceivers {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  receiverId     String?
  receiver       User?         @relation(fields: [receiverId], references: [id])
  isRead         Boolean?
  notificationId String?
  notification   Notification? @relation(fields: [notificationId], references: [id])
}

model Notification {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  creatorId             String?
  type                  String?
  projectId             String?
  project               Project?                @relation(fields: [projectId], references: [id])
  chatId                String?
  chat                  Chat?                   @relation(fields: [chatId], references: [id])
  documentId            String?
  document              Document?               @relation(fields: [documentId], references: [id])
  notificationReceivers NotificationReceivers[]
}
